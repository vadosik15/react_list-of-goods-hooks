{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","goodsArray","isReversed","setReversed","NONE","sortType","setSortType","sortBy","type","isListChanged","className","classNames","ALPHABET","onClick","LENGTH","goods","visibleGoods","sort","prevGood","nextGood","localeCompare","length","reverse","getReorderedGoods","map","index","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,O,eAAAA,I,uBAAAA,I,oBAAAA,M,KAME,IAAME,EAAgB,WAE3B,MAAqBC,mBAASF,GAAvBG,EAAP,oBACA,EAAkCD,oBAAS,GAA3C,mBAAOE,EAAP,KAAmBC,EAAnB,KACA,EAAgCH,mBAASH,EAASO,MAAlD,mBAAOC,EAAP,KAAiBC,EAAjB,KAQMC,EAAS,SAACC,GACdF,GAAY,WACV,OAAOE,MAkCLC,EAAgBJ,IAAaR,EAASO,MAAQF,EAEpD,OACE,sBAAKQ,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEF,KAAK,SACLE,UAAWC,IAAW,iBACpB,CAAE,WAAYN,IAAaR,EAASe,WACtCC,QAAS,WACPN,EAAOV,EAASe,WALpB,iCAWA,wBACEJ,KAAK,SACLE,UAAWC,IAAW,oBACpB,CAAE,WAAYN,IAAaR,EAASiB,SACtCD,QAAS,WACPN,EAAOV,EAASiB,SALpB,4BAWA,wBACEN,KAAK,SACLE,UAAWC,IAAW,oBACpB,CAAE,YAAaT,IACjBW,QAAS,WAxEfV,GAAY,WACV,OAAQD,MAmEN,qBASCO,GACC,wBACED,KAAK,SACLE,UAAU,4BACVG,QAAS,kBArEjBV,GAAY,WACV,OAAO,UAETG,GAAY,WACV,OAAOT,EAASO,SA8DZ,sBAUJ,6BACE,6BArEoB,SAACW,GACzB,IAAMC,EAAY,YAAOD,GAiBzB,OAfAC,EAAaC,MAAK,SAACC,EAAUC,GAC3B,OAAQd,GACN,KAAKR,EAASe,SACZ,OAAOM,EAASE,cAAcD,GAChC,KAAKtB,EAASiB,OACZ,OAAOI,EAASG,OAASF,EAASE,OACpC,QACE,OAAO,MAITnB,GACFc,EAAaM,UAGRN,EAoDAO,CAAkBtB,GAAYuB,KAAI,SAACC,GAAD,OACjC,oBAAI,UAAQ,OAAZ,SAAgCA,GAARA,cCvHpCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.fe392eae.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPHABET,\n  LENGTH,\n}\n\nexport const App: React.FC = () => {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const [goodsArray] = useState(goodsFromServer);\n  const [isReversed, setReversed] = useState(false);\n  const [sortType, setSortType] = useState(SortType.NONE);\n\n  const reverse = () => {\n    setReversed(() => {\n      return !isReversed;\n    });\n  };\n\n  const sortBy = (type: SortType) => {\n    setSortType(() => {\n      return type;\n    });\n  };\n\n  const reset = () => {\n    setReversed(() => {\n      return false;\n    });\n    setSortType(() => {\n      return SortType.NONE;\n    });\n  };\n\n  const getReorderedGoods = (goods: string[]) => {\n    const visibleGoods = [...goods];\n\n    visibleGoods.sort((prevGood, nextGood) => {\n      switch (sortType) {\n        case SortType.ALPHABET:\n          return prevGood.localeCompare(nextGood);\n        case SortType.LENGTH:\n          return prevGood.length - nextGood.length;\n        default:\n          return 0;\n      }\n    });\n\n    if (isReversed) {\n      visibleGoods.reverse();\n    }\n\n    return visibleGoods;\n  };\n\n  const isListChanged = sortType !== SortType.NONE || isReversed;\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={classNames('button is-info',\n            { 'is-light': sortType !== SortType.ALPHABET })}\n          onClick={() => {\n            sortBy(SortType.ALPHABET);\n          }}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames('button is-success',\n            { 'is-light': sortType !== SortType.LENGTH })}\n          onClick={() => {\n            sortBy(SortType.LENGTH);\n          }}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames('button is-warning',\n            { 'is-light': !isReversed })}\n          onClick={() => reverse()}\n        >\n          Reverse\n        </button>\n\n        {isListChanged && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={() => reset()}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        <ul>\n          {getReorderedGoods(goodsArray).map((index) => (\n            <li data-cy=\"Good\" key={index}>{index}</li>\n          ))}\n        </ul>\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}